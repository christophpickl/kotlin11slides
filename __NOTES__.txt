

see: https://github.com/christophpickl/awesomekotlin/blob/master/src/main/kotlin/com/github/christophpickl/awesomekotlin/kotlin11/


NOTES
========================================================================
* kotlin 1.1 is backwards compatible
* how to upgrade (gradle/maven, intellij, CLI)
* -jvm-target 1.8 supported, but doesnt change anything yet
* kotlin-stdlib-jre8 (instead kotlin-stdlib)
* preserve parameter names: -java-parameters
* `const val` will be inlined by compiler
* script engine:
	val engine = ScriptEngineManager().getEngineByExtension("kts")!!
	engine.eval("val x = 3")
	println(engine.eval("x + 2"))  // Prints out 5
* kotlin-reflect.jar package moved to kotlin.reflect.full (old are deprecated and will be deleted with kotlin 1.2); why => in order to prepare for java9



TODO read:
	https://blog.jetbrains.com/kotlin/2017/01/kotlin-1-1-whats-coming-in-the-standard-library/

http://kotlinlang.org/docs/reference/whatsnew11.html
https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1/
https://blog.jetbrains.com/kotlin/2017/04/kotlin-1-1-is-also-for-android-developers/
========================================================================
* javascript
* tooling

* coroutines (experimental)
* bound callable references
* improved data classes
* improved sealed classes
* type aliases
* destructuring inside lambdas

* underscore for unused variables (lambdas, destructuring)
* underscore in numeral literals
* type inference for getter properties
* inline property accessors
* local delegated properties

* generic enum value access
* @DslMarker to restrict lambda scope
* mod is now rem

STD LIB
-------
* string to number conversion: val port = System.getenv("PORT")?.toIntOrNull() ?: 80
* onEach()
* also(), takeIf(), takeUnless()
* groupingBy()
* toMap(), toMutableMap() // i already implemented that myself, didn't i?! ;)
* minus operator for map
* minOf(), maxOf()
* list "comprehension": val squares = List(10) { index -> index * index }; val mutable = MutableList(10) { 0 }
* Map.getValue(), withDefault
* Array manipulation functions: contentEquals, contentHashCode, contentToString  (or deep)